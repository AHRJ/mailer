from django.core.exceptions import ValidationError
from django.db import models
from django.utils import timezone
from model_utils.models import TimeStampedModel

from ..utils import next_monday
from .addressbook import AddressBook
from .advertisement import Advertisement
from .campaign import Campaign
from .news import News


class Letter(TimeStampedModel):
    class Status(models.TextChoices):
        UNPLANNED = "UNP", "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"
        PENDING = "PND", "–û–±—Ä–∞–±–æ—Ç–∫–∞..."
        PLANNED = "PLA", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"
        SENT = "SNT", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        EXPIRED = "EXP", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
        ERROR = "ERR", "–û—à–∏–±–∫–∞"

    title = models.CharField(
        "–¢–µ–º–∞ –ø–∏—Å—å–º–∞", max_length=255, default="üêÑ –ù–æ–≤–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞"
    )
    subtitle = models.CharField(
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞", max_length=255, default="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–∞—Å–ª–∏"
    )
    news_long = models.ManyToManyField(
        News, through="LetterNewsLong", related_name="news_long+"
    )
    news_short = models.ManyToManyField(
        News, through="LetterNewsShort", related_name="news_short+"
    )
    advertisement = models.ForeignKey(
        Advertisement,
        verbose_name="–†–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫",
        on_delete=models.CASCADE,
        blank=True,
        null=True,
    )
    campaigns = models.ManyToManyField(Campaign, blank=True)
    addressbooks = models.ManyToManyField(
        AddressBook,
        blank=True,
        default=AddressBook.objects.all,
        verbose_name="–ê–¥—Ä–µ—Å–Ω—ã–µ –∫–Ω–∏–≥–∏",
    )
    send_date = models.DateTimeField(default=next_monday, verbose_name="–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
    status = models.CharField(
        max_length=3,
        choices=Status.choices,
        default=Status.UNPLANNED,
        verbose_name="–°—Ç–∞—Ç—É—Å",
    )

    def __str__(self):
        return " ‚Ä¢ ".join([self.title, str(self.pk)])

    def clean(self):
        if self.send_date < timezone.now():
            raise ValidationError("–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π")

    def update_status(self):
        if self.status == Letter.Status.PENDING or self.status == Letter.Status.ERROR:
            pass
        elif self.send_date > timezone.now() and not self.campaigns.exists():
            self.status = Letter.Status.UNPLANNED
        elif self.send_date > timezone.now() and self.campaigns.exists():
            self.status = Letter.Status.PLANNED
        elif self.send_date < timezone.now() and self.campaigns.exists():
            self.status = Letter.Status.SENT
        elif self.send_date < timezone.now() and not self.campaigns.exists():
            self.status = Letter.Status.EXPIRED
        self.save()

    @property
    def news_long_sorted(self):
        return self.news_long.order_by("letternewslong__order")

    @property
    def news_short_sorted(self):
        return self.news_short.order_by("letternewsshort__order")

    class Meta:
        verbose_name = "–†–∞—Å—Å—ã–ª–æ—á–Ω–æ–µ –ø–∏—Å—å–º–æ"
        verbose_name_plural = "–†–∞—Å—Å—ã–ª–æ—á–Ω—ã–µ –ø–∏—Å—å–º–∞"


class LetterNewsLong(models.Model):
    letter = models.ForeignKey(Letter, on_delete=models.CASCADE)
    news = models.ForeignKey(News, on_delete=models.CASCADE)
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ("order",)
        verbose_name = "–ù–æ–≤–æ—Å—Ç—å —Å –∞–Ω–æ–Ω—Å–æ–º"
        verbose_name_plural = "–ù–æ–≤–æ—Å—Ç–∏ —Å –∞–Ω–æ–Ω—Å–æ–º"


class LetterNewsShort(models.Model):
    letter = models.ForeignKey(Letter, on_delete=models.CASCADE)
    news = models.ForeignKey(News, on_delete=models.CASCADE)
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ("order",)
        verbose_name = "–ù–æ–≤–æ—Å—Ç—å '–û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π'"
        verbose_name_plural = "–ù–æ–≤–æ—Å—Ç–∏ '–û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π'"
